// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: fitnessplans.sql

package db

import (
	"context"
)

const addDayPlan = `-- name: AddDayPlan :one
INSERT INTO day_plans (
    user_id,
    plan_id,
    day
) VALUES (
    $1, 
    $2,
    $3
)
RETURNING day_plan_id, user_id, plan_id, day
`

type AddDayPlanParams struct {
	UserID int64 `json:"user_id"`
	PlanID int64 `json:"plan_id"`
	Day    int32 `json:"day"`
}

func (q *Queries) AddDayPlan(ctx context.Context, arg AddDayPlanParams) (DayPlan, error) {
	row := q.db.QueryRowContext(ctx, addDayPlan, arg.UserID, arg.PlanID, arg.Day)
	var i DayPlan
	err := row.Scan(
		&i.DayPlanID,
		&i.UserID,
		&i.PlanID,
		&i.Day,
	)
	return i, err
}

const addDayPlanMoves = `-- name: AddDayPlanMoves :exec
INSERT INTO day_plan_moves (
    user_id,
    plan_id,
    move_id,
    sets,
    reps
)   VALUES (
    $1, 
    $2,
    $3,
    $4, 
    $5
)
`

type AddDayPlanMovesParams struct {
	UserID int64 `json:"user_id"`
	PlanID int64 `json:"plan_id"`
	MoveID int64 `json:"move_id"`
	Sets   int32 `json:"sets"`
	Reps   int32 `json:"reps"`
}

func (q *Queries) AddDayPlanMoves(ctx context.Context, arg AddDayPlanMovesParams) error {
	_, err := q.db.ExecContext(ctx, addDayPlanMoves,
		arg.UserID,
		arg.PlanID,
		arg.MoveID,
		arg.Sets,
		arg.Reps,
	)
	return err
}

const addPlan = `-- name: AddPlan :one
INSERT INTO plans (
    user_id,
    plan_name,
    days
) VALUES (
    $1, 
    $2,
    $3
)
RETURNING plan_id, user_id, plan_name, days, created_at
`

type AddPlanParams struct {
	UserID   int64  `json:"user_id"`
	PlanName string `json:"plan_name"`
	Days     int32  `json:"days"`
}

func (q *Queries) AddPlan(ctx context.Context, arg AddPlanParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, addPlan, arg.UserID, arg.PlanName, arg.Days)
	var i Plan
	err := row.Scan(
		&i.PlanID,
		&i.UserID,
		&i.PlanName,
		&i.Days,
		&i.CreatedAt,
	)
	return i, err
}
