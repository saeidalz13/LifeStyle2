// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: getExpenses.sql

package db

import (
	"context"
)

const fetchAllCapitalExpenses = `-- name: FetchAllCapitalExpenses :many
SELECT capital_exp_id, budget_id, user_id, expenses, description, created_at FROM capital_expenses
WHERE user_id = $1 AND budget_id = $2
`

type FetchAllCapitalExpensesParams struct {
	UserID   int64 `json:"user_id"`
	BudgetID int64 `json:"budget_id"`
}

func (q *Queries) FetchAllCapitalExpenses(ctx context.Context, arg FetchAllCapitalExpensesParams) ([]CapitalExpense, error) {
	rows, err := q.db.QueryContext(ctx, fetchAllCapitalExpenses, arg.UserID, arg.BudgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CapitalExpense{}
	for rows.Next() {
		var i CapitalExpense
		if err := rows.Scan(
			&i.CapitalExpID,
			&i.BudgetID,
			&i.UserID,
			&i.Expenses,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchAllEatoutExpenses = `-- name: FetchAllEatoutExpenses :many
SELECT eatout_exp_id, budget_id, user_id, expenses, description, created_at FROM eatout_expenses
WHERE user_id = $1 AND budget_id = $2
`

type FetchAllEatoutExpensesParams struct {
	UserID   int64 `json:"user_id"`
	BudgetID int64 `json:"budget_id"`
}

func (q *Queries) FetchAllEatoutExpenses(ctx context.Context, arg FetchAllEatoutExpensesParams) ([]EatoutExpense, error) {
	rows, err := q.db.QueryContext(ctx, fetchAllEatoutExpenses, arg.UserID, arg.BudgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EatoutExpense{}
	for rows.Next() {
		var i EatoutExpense
		if err := rows.Scan(
			&i.EatoutExpID,
			&i.BudgetID,
			&i.UserID,
			&i.Expenses,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchAllEntertainmentExpenses = `-- name: FetchAllEntertainmentExpenses :many
SELECT entertainment_exp_id, budget_id, user_id, expenses, description, created_at FROM entertainment_expenses
WHERE user_id = $1 AND budget_id = $2
`

type FetchAllEntertainmentExpensesParams struct {
	UserID   int64 `json:"user_id"`
	BudgetID int64 `json:"budget_id"`
}

func (q *Queries) FetchAllEntertainmentExpenses(ctx context.Context, arg FetchAllEntertainmentExpensesParams) ([]EntertainmentExpense, error) {
	rows, err := q.db.QueryContext(ctx, fetchAllEntertainmentExpenses, arg.UserID, arg.BudgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntertainmentExpense{}
	for rows.Next() {
		var i EntertainmentExpense
		if err := rows.Scan(
			&i.EntertainmentExpID,
			&i.BudgetID,
			&i.UserID,
			&i.Expenses,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
